// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LoginForm Component renders the LoginForm component having unpopulated props with no errors 1`] = `
<LoginForm
  errors={
    Object {
      "password": "",
      "username": "",
    }
  }
  userInput={
    Object {
      "password": "",
      "username": "",
    }
  }
>
  <styled.form
    onSubmit={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [
            Object {
              "className": "column is-4 is-offset-4",
            },
          ],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": true,
            "lastClassName": "fDYKEV",
            "rules": Array [
              "
  && {
    padding: 1px;
  }
",
            ],
          },
          "displayName": "styled.form",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "form",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      onSubmit={[Function]}
    >
      <form
        className="sc-bwzfXH column is-4 is-offset-4 fDYKEV"
        onSubmit={[Function]}
      >
        <styled.h1>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  Object {
                    "className": "title is-3",
                  },
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": true,
                  "lastClassName": "hjCtQn",
                  "rules": Array [
                    "
  && {
    text-align: center;
    margin: 20px 0 20px 0;
  }
",
                  ],
                },
                "displayName": "styled.h1",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "h1",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <h1
              className="sc-htpNat title is-3 hjCtQn"
            >
              Login Here
            </h1>
          </StyledComponent>
        </styled.h1>
        <LoginInputField
          error=""
          label="Username"
          loading={false}
          name="username"
          onChange={[Function]}
          type="text"
          value=""
        >
          <div
            className="field"
          >
            <label
              className="label"
              htmlFor="username+Username"
            >
              Username
              :
            </label>
            <div
              className="control is-child"
            >
              <InputField
                data-test="target-name-input"
                disabled={false}
                error=""
                name="username"
                onChange={[Function]}
                type="text"
                value=""
              >
                <div
                  className="control"
                >
                  <input
                    className="input undefined "
                    data-test="target-name-input"
                    disabled={false}
                    name="username"
                    onChange={[Function]}
                    type="text"
                    value=""
                  />
                </div>
              </InputField>
            </div>
          </div>
        </LoginInputField>
        <LoginInputField
          error=""
          label="Password"
          loading={false}
          name="password"
          onChange={[Function]}
          type="password"
          value=""
        >
          <div
            className="field"
          >
            <label
              className="label"
              htmlFor="password+Password"
            >
              Password
              :
            </label>
            <div
              className="control is-child"
            >
              <InputField
                data-test="target-name-input"
                disabled={false}
                error=""
                name="password"
                onChange={[Function]}
                type="password"
                value=""
              >
                <div
                  className="control"
                >
                  <input
                    className="input undefined "
                    data-test="target-name-input"
                    disabled={false}
                    name="password"
                    onChange={[Function]}
                    type="password"
                    value=""
                  />
                </div>
              </InputField>
            </div>
          </div>
        </LoginInputField>
        <button
          className="signIn button is-success is-fullwidth is-rounded"
          disabled={false}
        >
          Sign in
        </button>
      </form>
    </StyledComponent>
  </styled.form>
</LoginForm>
`;
